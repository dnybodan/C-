package service;

import dao.DataAccessException;
import dao.Database;
import dao.PersonDao;
import dao.UserDao;
import model.Person;
import model.User;
import request.LoginRequest;
import request.RegisterRequest;
import result.FillResult;
import result.LoginResult;
import result.RegisterResult;

import java.io.IOException;
import java.sql.Connection;

/**
 * The Registering Service
 */
public class RegisterService {


    /**
     * Creates a new user account, generates 4 generations of ancestor data for the new user, logs the user in, and returns an auth token.
     * @param request the request object with the user information
     * @return a register result object generated by the user register request
     */
    public static RegisterResult register(RegisterRequest request) {
        //TODO: TEST THIS
        String message;
        Database db = new Database();
        try {


            Connection conn = db.getConnection();
            UserDao uDao = new UserDao(conn);
            PersonDao pDao = new PersonDao(conn);
            checkErrors(request, uDao);
            Person newPerson = new Person(generateID(request.getUserName()), request.getUserName(), request.getFirstName(),
                    request.getLastName(), request.getGender(), null, null, null);
            pDao.insertPerson(newPerson);

            User newUser = new User(request.getUserName(), request.getPassword(), request.getEmail(), request.getFirstName(), request.getLastName(),
                    request.getGender(), newPerson.getPersonID());
            uDao.insertUser(newUser);

            FillResult fillResult = FillService.getFillResponse(newUser.getUserName(), 4, conn);
            if(!fillResult.getMessage().toLowerCase().contains("success"))
                throw new IOException("error populating new user family tree");

            LoginRequest lRequest = new LoginRequest(newUser.getUserName(), newUser.getPassword());
            LoginResult lResult = LoginService.getLoginResponse(lRequest, conn);
            if(!lResult.isSuccess()) {
                throw new IOException("there was an error logging in the newly registered user");
            }
            db.closeConnection(true);
            return new RegisterResult(lResult.getAuthToken(), newUser.getUserName(),
                    newPerson.getPersonID(), true);
        }
        catch (DataAccessException | IOException e) {
            e.printStackTrace();
            message = e.getMessage();
            try {
                db.closeConnection(false);
            } catch (DataAccessException ex) {
                ex.printStackTrace();
                message = ex.getMessage();
            }
        }
        return new RegisterResult(message, false);
    }

    private static void checkErrors(RegisterRequest request, UserDao uDao) throws IOException, DataAccessException{
        if(request.getUserName() == null || request.getPassword() == null || request.getFirstName() == null ||
                request.getGender() == null || request.getLastName() == null)
            throw new IOException("Input Error");
        else if (uDao.getUser(request.getUserName()) != null)
            throw new IOException("Input error");
        else if (request.getGender().equals("m") && request.getGender().equals("f")) {
            throw new IOException("Input error");
        }
    }

    private static String generateID(String randString) {
        StringBuilder ID = new StringBuilder();
        String charString = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                + "0123456789"
                + "abcdefghijklmnopqrstuvxyz";

        for (int i = 0; i < 20; i++) {

            int index = (int)(charString.length()
                    * Math.random() * (int)randString.charAt(randString.length() - 1) % charString.length() - 1);

            ID.append(charString.charAt(index));
        }
        return ID.toString();
    }



}
